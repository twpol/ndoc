<?xml version="1.0" ?>
<project name="ndoc" default="compile" xmlnds="http://tempuri.org/nant-vs.xsd">
    <!-- Global project settings -->
    <property name="project.name" value="ndoc" />
    <property name="project.version" value="1.3" />
    <property name="project.release.type" value="beta1a" /> <!-- dev / alpha / beta# / rc# / release -->
    <property name="project.build.config" value="debug" readonly="false" />
    <property name="project.build.package" value="false" readonly="false" />
    <property name="build.number" value="${math::abs(math::floor(timespan::get-total-days(datetime::now() - convert::to-datetime('01/01/2000'))))}" />
    <property name="build.dir" value="${nant.project.basedir}/bin" readonly="false" />
    <!-- Include helpers -->
    <include buildfile="NDoc.build.include" />
    <include buildfile="NDoc.build.package" />
    <!-- Targets that should always be executed -->
    <call target="set-build-configuration" />
    <call target="set-framework-configuration" />
    <!--

    -->
    <target name="debug" description="Change the build configuration to debug mode.">
        <call target="set-debug-build-configuration" />
    </target>
    <!--

    -->
    <target name="release" description="Change the build configuration to release mode.">
        <call target="set-release-build-configuration" />
    </target>
    <!--

    -->
    <target name="compile-build" description="Compile current build configuration for all supports target frameworks">
        <echo message="Compiling the ${current.build.config} build configuration for all supported target frameworks." />
        <!-- 
            build .NET Framework 1.0 version if both the Framework and SDK are available 
        -->
        <if test="${framework::exists('net-1.0')}">
            <if test="${framework::sdk-exists('net-1.0')}">
                <call target="set-net-1.0-framework-configuration" />
                <call target="compile" />
            </if>
            <if test="${not framework::sdk-exists('net-1.0')}">
                <if test="${property::exists('project.build.package') and project.build.package}">
                    <fail message="The .NET Framework SDK 1.0 is not available." />
                </if>
                <if test="${not property::exists('project.build.package') or not project.build.package}">
                    <echo message="The .NET Framework SDK 1.0 is not available. Build skipped." />
                </if>
            </if>
        </if>
        <if test="${not framework::exists('net-1.0')}">
            <if test="${property::exists('project.build.package') and project.build.package}">
                <fail message="The .NET Framework 1.0 is not available." />
            </if>
            <if test="${not property::exists('project.build.package') or not project.build.package}">
                <echo message="The .NET Framework 1.0 is not available. Build skipped." />
            </if>
        </if>
        <!-- 
            build .NET Framework 1.1 version if both Framework and SDK are available 
        -->
        <if test="${framework::exists('net-1.1')}">
            <if test="${framework::sdk-exists('net-1.1')}">
                <call target="set-net-1.1-framework-configuration" />
                <call target="compile" />
            </if>
            <if test="${not framework::sdk-exists('net-1.1')}">
                <if test="${property::exists('project.build.package') and project.build.package}">
                    <fail message="The .NET Framework SDK 1.1 is not available." />
                </if>
                <if test="${not property::exists('project.build.package') or not project.build.package}">
                    <echo message="The .NET Framework SDK 1.1 is not available. Build skipped." />
                </if>
            </if>
        </if>
        <if test="${not framework::exists('net-1.1')}">
            <if test="${property::exists('project.build.package') and project.build.package}">
                <fail message="The .NET Framework 1.1 is not available." />
            </if>
            <if test="${not property::exists('project.build.package') or not project.build.package}">
                <echo message="The .NET Framework 1.1 is not available. Build skipped." />
            </if>
        </if>
        <!-- 
            build .NET Framework 2.0 version if both Framework and SDK are available 
        -->
        <!--
        <if test="${framework::exists('net-2.0')}">
            <if test="${framework::sdk-exists('net-2.0')}">
                <call target="set-net-2.0-framework-configuration" />
                <call target="compile" />
            </if>
            <if test="${not framework::sdk-exists('net-2.0')}">
                <if test="${property::exists('project.build.package') and project.build.package}">
                    <fail message="The .NET Framework SDK 2.0 is not available." />
                </if>
                <if test="${not property::exists('project.build.package') or not project.build.package}">
                    <echo message="The .NET Framework SDK 2.0 is not available. Build skipped." />
                </if>
            </if>
        </if>
        <if test="${not framework::exists('net-2.0')}">
            <if test="${property::exists('project.build.package') and project.build.package}">
                <fail message="The .NET Framework 2.0 is not available." />
            </if>
            <if test="${not property::exists('project.build.package') or not project.build.package}">
                <echo message="The .NET Framework 2.0 is not available. Build skipped." />
            </if>
        </if>
        -->
        <!-- 
            build Mono 1.0 version if both Framework and SDK are available 
        -->
        <if test="${framework::exists('mono-1.0')}">
            <if test="${framework::sdk-exists('mono-1.0')}">
                <call target="set-mono-1.0-framework-configuration" />
                <call target="compile" />
            </if>
            <if test="${not framework::sdk-exists('mono-1.0')}">
                <if test="${property::exists('project.build.package') and project.build.package}">
                    <fail message="The Mono SDK 1.0 is not available." />
                </if>
                <if test="${not property::exists('project.build.package') or not project.build.package}">
                    <echo message="The Mono SDK 1.0 is not available. Build skipped." />
                </if>
            </if>
        </if>
        <if test="${not framework::exists('mono-1.0')}">
            <if test="${property::exists('project.build.package') and project.build.package}">
                <fail message="Mono 1.0 is not available." />
            </if>
            <if test="${not property::exists('project.build.package') or not project.build.package}">
                <echo message="Mono 1.0 is not available. Build skipped." />
            </if>
        </if>
    </target>
    <!--

    -->
    <target name="compile" description="Builds the current build configuration for the current target framework." depends="create-common-assemblyinfo">
        <!-- ensure the bin dir has been created, and clean it up if needed -->
        <call target="clean-current-bin-dir" />
        <!-- copy the ndoc signing key file to the bin dir -->
        <copy file="${nant.project.basedir}/NDoc.snk" todir="${current.bin.dir}" />
        <!-- build all projects -->
        <nant buildfile="src/Core/Core.build" target="compile" inheritall="true" />
        <nant buildfile="src/Console/Console.build" target="compile" inheritall="true" />
        <nant buildfile="src/VisualStudio/VisualStudio.build" target="compile" inheritall="true" />
        <nant buildfile="src/Gui/Gui.build" target="compile" inheritall="true" />
        <nant buildfile="src/Documenter/Msdn/Msdn.build" target="compile" inheritall="true" />
        <nant buildfile="src/Documenter/JavaDoc/JavaDoc.build" target="compile" inheritall="true" />
        <nant buildfile="src/Documenter/Latex/Latex.build" target="compile" inheritall="true" />
        <nant buildfile="src/Documenter/LinearHtml/LinearHtml.build" target="compile" inheritall="true" />
        <nant buildfile="src/Documenter/NativeHtmlHelp2/NativeHtmlHelp2.build" target="compile" inheritall="true" />
        <nant buildfile="src/Documenter/Xml/Xml.build" target="compile" inheritall="true" />
        <nant buildfile="src/Test/Test.build" target="compile" inheritall="true"  />
        <!-- remove the ndoc signing key file -->
        <delete file="${current.bin.dir}/NDoc.snk" />
    </target>
    <!--

    -->
    <target name="create-common-assemblyinfo">
        <!-- ensure src/CommonAssemblyInfo.cs is writable if it already exists -->
        <attrib file="src/CommonAssemblyInfo.cs" readonly="false" if="${file::exists('src/CommonAssemblyInfo.cs')}" />
        <!-- generate the source file holding the common assembly-level attributes -->
        <asminfo output="src/CommonAssemblyInfo.cs" language="CSharp">
            <imports>
                <import name="System" />
                <import name="System.Reflection" />
                <import name="System.Runtime.InteropServices" />
            </imports>
            <attributes>
                <attribute type="ComVisibleAttribute" value="false" />
                <attribute type="AssemblyConfigurationAttribute" value="${framework::get-target-framework()}.${platform::get-name()}; ${project.release.type}" />
                <attribute type="AssemblyCompanyAttribute" value="http://ndoc.sourceforge.net" />
                <attribute type="AssemblyProductAttribute" value="NDoc" />
                <attribute type="AssemblyCopyrightAttribute" value="" />
                <attribute type="AssemblyTrademarkAttribute" value="" />
                <attribute type="AssemblyCultureAttribute" value="" />
                <attribute type="AssemblyVersionAttribute" value="${project.version}.${build.number}.0" />
                <attribute type="AssemblyInformationalVersionAttribute" value="${project.version}" />
            </attributes>
        </asminfo>
    </target>
    <!--

    -->
    <target name="sdkdoc" description="Builds SDK documentation (based on .NET Framework 1.1 assembly)">
        <echo message="Creating SDK Documentation for NDoc Core." />
        <ndoc>
            <assemblies basedir="${build.dir}/net/1.1">
                <include name="NDoc.Core.dll" />
            </assemblies>
            <documenters>
                <documenter name="MSDN">
                    <property name="OutputDirectory" value="doc/sdk" />
                    <property name="HtmlHelpName" value="NDoc-SDK" />
                    <property name="IncludeFavorites" value="True" />
                    <property name="Title" value="NDoc ${project.version} SDK" />
                    <property name="SplitTOCs" value="False" />
                    <property name="DefaultTOC" value="" />
                    <property name="IncludeHierarchy" value="True" />
                    <property name="ShowVisualBasic" value="True" />
                    <property name="RootPageFileName" value="" />
                    <property name="RootPageContainsNamespaces" value="False" />
                    <property name="SortTOCByNamespace" value="True" />
                    <property name="BinaryTOC" value="True" />
                    <property name="OutputTarget" value="HtmlHelpAndWeb" />
                    <property name="HeaderHtml" value="" />
                    <property name="FooterHtml" value="" />
                    <property name="FilesToInclude" value="" />
                    <property name="LinkToSdkDocVersion" value="MsdnOnline" />
                    <property name="ExtensibilityStylesheet" value="" />
                    <property name="ShowMissingSummaries" value="False" />
                    <property name="ShowMissingRemarks" value="False" />
                    <property name="ShowMissingParams" value="False" />
                    <property name="ShowMissingReturns" value="False" />
                    <property name="ShowMissingValues" value="False" />
                    <property name="DocumentExplicitInterfaceImplementations" value="False" />
                    <property name="DocumentInternals" value="False" />
                    <property name="DocumentProtected" value="True" />
                    <property name="DocumentSealedProtected" value="False" />
                    <property name="DocumentPrivates" value="False" />
                    <property name="DocumentProtectedInternalAsProtected" value="False" />
                    <property name="DocumentEmptyNamespaces" value="False" />
                    <property name="SkipNamespacesWithoutSummaries" value="False" />
                    <property name="EditorBrowsableFilter" value="Off" />
                    <property name="IncludeAssemblyVersion" value="True" />
                    <property name="CopyrightText" value="" />
                    <property name="CopyrightHref" value="" />
                    <property name="ReferencesPath" value="" />
                    <property name="FeedbackEmailAddress" value="ndoc-helpfeedback@lists.sourceforge.net" />
                    <property name="UseNamespaceDocSummaries" value="True" />
                    <property name="AutoPropertyBackerSummaries" value="False" />
                    <property name="AutoDocumentConstructors" value="True" />
                    <property name="GetExternalSummaries" value="True" />
                    <property name="Preliminary" value="${if(project.release.type == 'release','False','True')}" />
                    <property name="UseNDocXmlFile" value="" />
                    <property name="CleanIntermediates" value="True" />
                    <property name="DocumentAttributes" value="False" />
                    <property name="ShowTypeIdInAttributes" value="False" />
                    <property name="DocumentedAttributes" value="" />
                    <property name="InheritPlatformSupport" value="True" />
                    <property name="DefaultOSSupport" value="all" />
                    <property name="SupportCompactFrameworkByDefault" value="False" />
                    <property name="SupportMONOFrameworkByDefault" value="False" />
                    <property name="AdditionalFrameworkList" value="" />
                    <property name="AdditionalOSList" value="" />
                </documenter>
            </documenters>
        </ndoc>
    </target>
</project>
